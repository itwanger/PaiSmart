/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by unplugin-auto-import
// biome-ignore lint: disable
export {}
declare global {
  const DARK_CLASS: typeof import('../constants/app')['DARK_CLASS']
  const EffectScope: typeof import('vue')['EffectScope']
  const GLOBAL_HEADER_MENU_ID: typeof import('../constants/app')['GLOBAL_HEADER_MENU_ID']
  const GLOBAL_SIDER_MENU_ID: typeof import('../constants/app')['GLOBAL_SIDER_MENU_ID']
  const REG_CODE_FOUR: typeof import('../constants/reg')['REG_CODE_FOUR']
  const REG_CODE_SIX: typeof import('../constants/reg')['REG_CODE_SIX']
  const REG_EMAIL: typeof import('../constants/reg')['REG_EMAIL']
  const REG_PHONE: typeof import('../constants/reg')['REG_PHONE']
  const REG_PWD: typeof import('../constants/reg')['REG_PWD']
  const REG_URL: typeof import('../constants/reg')['REG_URL']
  const REG_USER_NAME: typeof import('../constants/reg')['REG_USER_NAME']
  const SetupStoreId: typeof import('../enum/index')['SetupStoreId']
  const UploadStatus: typeof import('../enum/index')['UploadStatus']
  const acceptHMRUpdate: typeof import('pinia')['acceptHMRUpdate']
  const addThemeVarsToGlobal: typeof import('../store/modules/theme/shared')['addThemeVarsToGlobal']
  const calculateMD5: typeof import('../utils/common')['calculateMD5']
  const chunkSize: typeof import('../constants/common')['chunkSize']
  const clearAuthStorage: typeof import('../store/modules/auth/shared')['clearAuthStorage']
  const computed: typeof import('vue')['computed']
  const createApp: typeof import('vue')['createApp']
  const createPinia: typeof import('pinia')['createPinia']
  const createServiceConfig: typeof import('../utils/service')['createServiceConfig']
  const createThemeToken: typeof import('../store/modules/theme/shared')['createThemeToken']
  const customRef: typeof import('vue')['customRef']
  const dayjs: typeof import('dayjs')['default']
  const defineAsyncComponent: typeof import('vue')['defineAsyncComponent']
  const defineComponent: typeof import('vue')['defineComponent']
  const defineStore: typeof import('pinia')['defineStore']
  const effectScope: typeof import('vue')['effectScope']
  const enableStatusOptions: typeof import('../constants/common')['enableStatusOptions']
  const extractTabsByAllRoutes: typeof import('../store/modules/tab/shared')['extractTabsByAllRoutes']
  const fetchCustomBackendError: typeof import('../service/api/auth')['fetchCustomBackendError']
  const fetchDeleteFile: typeof import('../service/api/knowledge-base')['fetchDeleteFile']
  const fetchDeleteOrgTag: typeof import('../service/api/org-tags')['fetchDeleteOrgTag']
  const fetchGetConstantRoutes: typeof import('../service/api/route')['fetchGetConstantRoutes']
  const fetchGetFileList: typeof import('../service/api/knowledge-base')['fetchGetFileList']
  const fetchGetOrgTagList: typeof import('../service/api/org-tag')['fetchGetOrgTagList']
  const fetchGetOrgTree: typeof import('../service/api/org-tags')['fetchGetOrgTree']
  const fetchGetUploadStatus: typeof import('../service/api/knowledge-base')['fetchGetUploadStatus']
  const fetchGetUserInfo: typeof import('../service/api/auth')['fetchGetUserInfo']
  const fetchGetUserList: typeof import('../service/api/user')['fetchGetUserList']
  const fetchGetUserRoutes: typeof import('../service/api/route')['fetchGetUserRoutes']
  const fetchIsRouteExist: typeof import('../service/api/route')['fetchIsRouteExist']
  const fetchLogin: typeof import('../service/api/auth')['fetchLogin']
  const fetchMergeChunk: typeof import('../service/api/knowledge-base')['fetchMergeChunk']
  const fetchRefreshToken: typeof import('../service/api/auth')['fetchRefreshToken']
  const fetchRegister: typeof import('../service/api/auth')['fetchRegister']
  const fetchSetPrimaryOrg: typeof import('../service/api/org-tags')['fetchSetPrimaryOrg']
  const fetchSignIn: typeof import('../service/api/auth')['fetchSignIn']
  const fetchSignUp: typeof import('../service/api/auth')['fetchSignUp']
  const fetchUploadChunk: typeof import('../service/api/knowledge-base')['fetchUploadChunk']
  const fileSize: typeof import('../utils/common')['fileSize']
  const filterAuthRoutesByRoles: typeof import('../store/modules/route/shared')['filterAuthRoutesByRoles']
  const filterTabsById: typeof import('../store/modules/tab/shared')['filterTabsById']
  const filterTabsByIds: typeof import('../store/modules/tab/shared')['filterTabsByIds']
  const findTabByRouteName: typeof import('../store/modules/tab/shared')['findTabByRouteName']
  const getActivePinia: typeof import('pinia')['getActivePinia']
  const getAllTabs: typeof import('../store/modules/tab/shared')['getAllTabs']
  const getBreadcrumbsByRoute: typeof import('../store/modules/route/shared')['getBreadcrumbsByRoute']
  const getCacheRouteNames: typeof import('../store/modules/route/shared')['getCacheRouteNames']
  const getCurrentInstance: typeof import('vue')['getCurrentInstance']
  const getCurrentScope: typeof import('vue')['getCurrentScope']
  const getDefaultHomeTab: typeof import('../store/modules/tab/shared')['getDefaultHomeTab']
  const getFixedTabIds: typeof import('../store/modules/tab/shared')['getFixedTabIds']
  const getFixedTabs: typeof import('../store/modules/tab/shared')['getFixedTabs']
  const getGlobalMenusByAuthRoutes: typeof import('../store/modules/route/shared')['getGlobalMenusByAuthRoutes']
  const getLocalIcons: typeof import('../utils/icon')['getLocalIcons']
  const getNaiveTheme: typeof import('../store/modules/theme/shared')['getNaiveTheme']
  const getRouteIcons: typeof import('../store/modules/tab/shared')['getRouteIcons']
  const getSelectedMenuKeyPathByKey: typeof import('../store/modules/route/shared')['getSelectedMenuKeyPathByKey']
  const getServiceBaseURL: typeof import('../utils/service')['getServiceBaseURL']
  const getTabByRoute: typeof import('../store/modules/tab/shared')['getTabByRoute']
  const getTabIdByRoute: typeof import('../store/modules/tab/shared')['getTabIdByRoute']
  const getToken: typeof import('../store/modules/auth/shared')['getToken']
  const h: typeof import('vue')['h']
  const initThemeSettings: typeof import('../store/modules/theme/shared')['initThemeSettings']
  const inject: typeof import('vue')['inject']
  const isPC: typeof import('../utils/agent')['isPC']
  const isProxy: typeof import('vue')['isProxy']
  const isReactive: typeof import('vue')['isReactive']
  const isReadonly: typeof import('vue')['isReadonly']
  const isRef: typeof import('vue')['isRef']
  const isRouteExistByRouteName: typeof import('../store/modules/route/shared')['isRouteExistByRouteName']
  const isTabInTabs: typeof import('../store/modules/tab/shared')['isTabInTabs']
  const localStg: typeof import('../utils/storage')['localStg']
  const localforage: typeof import('../utils/storage')['localforage']
  const loginModuleRecord: typeof import('../constants/app')['loginModuleRecord']
  const mapActions: typeof import('pinia')['mapActions']
  const mapGetters: typeof import('pinia')['mapGetters']
  const mapState: typeof import('pinia')['mapState']
  const mapStores: typeof import('pinia')['mapStores']
  const mapWritableState: typeof import('pinia')['mapWritableState']
  const markRaw: typeof import('vue')['markRaw']
  const nextTick: typeof import('vue')['nextTick']
  const onActivated: typeof import('vue')['onActivated']
  const onBeforeMount: typeof import('vue')['onBeforeMount']
  const onBeforeRouteLeave: typeof import('vue-router')['onBeforeRouteLeave']
  const onBeforeRouteUpdate: typeof import('vue-router')['onBeforeRouteUpdate']
  const onBeforeUnmount: typeof import('vue')['onBeforeUnmount']
  const onBeforeUpdate: typeof import('vue')['onBeforeUpdate']
  const onDeactivated: typeof import('vue')['onDeactivated']
  const onErrorCaptured: typeof import('vue')['onErrorCaptured']
  const onMounted: typeof import('vue')['onMounted']
  const onRenderTracked: typeof import('vue')['onRenderTracked']
  const onRenderTriggered: typeof import('vue')['onRenderTriggered']
  const onScopeDispose: typeof import('vue')['onScopeDispose']
  const onServerPrefetch: typeof import('vue')['onServerPrefetch']
  const onUnmounted: typeof import('vue')['onUnmounted']
  const onUpdated: typeof import('vue')['onUpdated']
  const onWatcherCleanup: typeof import('vue')['onWatcherCleanup']
  const provide: typeof import('vue')['provide']
  const reactive: typeof import('vue')['reactive']
  const readonly: typeof import('vue')['readonly']
  const ref: typeof import('vue')['ref']
  const request: typeof import('@/service/request')['request']
  const resetCacheStrategyOptions: typeof import('../constants/app')['resetCacheStrategyOptions']
  const resetCacheStrategyRecord: typeof import('../constants/app')['resetCacheStrategyRecord']
  const resolveComponent: typeof import('vue')['resolveComponent']
  const sessionStg: typeof import('../utils/storage')['sessionStg']
  const setActivePinia: typeof import('pinia')['setActivePinia']
  const setMapStoreSuffix: typeof import('pinia')['setMapStoreSuffix']
  const shallowReactive: typeof import('vue')['shallowReactive']
  const shallowReadonly: typeof import('vue')['shallowReadonly']
  const shallowRef: typeof import('vue')['shallowRef']
  const sortRoutesByOrder: typeof import('../store/modules/route/shared')['sortRoutesByOrder']
  const storeToRefs: typeof import('pinia')['storeToRefs']
  const themeLayoutModeOptions: typeof import('../constants/app')['themeLayoutModeOptions']
  const themeLayoutModeRecord: typeof import('../constants/app')['themeLayoutModeRecord']
  const themePageAnimationModeOptions: typeof import('../constants/app')['themePageAnimationModeOptions']
  const themePageAnimationModeRecord: typeof import('../constants/app')['themePageAnimationModeRecord']
  const themeSchemaOptions: typeof import('../constants/app')['themeSchemaOptions']
  const themeSchemaRecord: typeof import('../constants/app')['themeSchemaRecord']
  const themeScrollModeOptions: typeof import('../constants/app')['themeScrollModeOptions']
  const themeScrollModeRecord: typeof import('../constants/app')['themeScrollModeRecord']
  const themeTabModeOptions: typeof import('../constants/app')['themeTabModeOptions']
  const themeTabModeRecord: typeof import('../constants/app')['themeTabModeRecord']
  const toRaw: typeof import('vue')['toRaw']
  const toRef: typeof import('vue')['toRef']
  const toRefs: typeof import('vue')['toRefs']
  const toValue: typeof import('vue')['toValue']
  const toggleAuxiliaryColorModes: typeof import('../store/modules/theme/shared')['toggleAuxiliaryColorModes']
  const toggleCssDarkMode: typeof import('../store/modules/theme/shared')['toggleCssDarkMode']
  const toggleHtmlClass: typeof import('../utils/common')['toggleHtmlClass']
  const transformMenuToSearchMenus: typeof import('../store/modules/route/shared')['transformMenuToSearchMenus']
  const transformRecordToOption: typeof import('../utils/common')['transformRecordToOption']
  const translateOptions: typeof import('../utils/common')['translateOptions']
  const triggerRef: typeof import('vue')['triggerRef']
  const unref: typeof import('vue')['unref']
  const updateLocaleOfGlobalMenus: typeof import('../store/modules/route/shared')['updateLocaleOfGlobalMenus']
  const updateTabByI18nKey: typeof import('../store/modules/tab/shared')['updateTabByI18nKey']
  const updateTabsByI18nKey: typeof import('../store/modules/tab/shared')['updateTabsByI18nKey']
  const uploadAccept: typeof import('../constants/common')['uploadAccept']
  const useAppStore: typeof import('../store/modules/app/index')['useAppStore']
  const useAttrs: typeof import('vue')['useAttrs']
  const useAuth: typeof import('../hooks/business/auth')['useAuth']
  const useAuthStore: typeof import('../store/modules/auth/index')['useAuthStore']
  const useCaptcha: typeof import('../hooks/business/captcha')['useCaptcha']
  const useChatStore: typeof import('../store/modules/chat/index')['useChatStore']
  const useCssModule: typeof import('vue')['useCssModule']
  const useCssVars: typeof import('vue')['useCssVars']
  const useEcharts: typeof import('../hooks/common/echarts')['useEcharts']
  const useFormRules: typeof import('../hooks/common/form')['useFormRules']
  const useId: typeof import('vue')['useId']
  const useKnowledgeBaseStore: typeof import('../store/modules/knowledge-base/index')['useKnowledgeBaseStore']
  const useLink: typeof import('vue-router')['useLink']
  const useModel: typeof import('vue')['useModel']
  const useNaiveForm: typeof import('../hooks/common/form')['useNaiveForm']
  const useRoute: typeof import('vue-router')['useRoute']
  const useRouteStore: typeof import('../store/modules/route/index')['useRouteStore']
  const useRouter: typeof import('vue-router')['useRouter']
  const useRouterPush: typeof import('../hooks/common/router')['useRouterPush']
  const useSlots: typeof import('vue')['useSlots']
  const useSvgIcon: typeof import('../hooks/common/icon')['useSvgIcon']
  const useTabStore: typeof import('../store/modules/tab/index')['useTabStore']
  const useTable: typeof import('../hooks/common/table')['useTable']
  const useTableOperate: typeof import('../hooks/common/table')['useTableOperate']
  const useTemplateRef: typeof import('vue')['useTemplateRef']
  const useThemeStore: typeof import('../store/modules/theme/index')['useThemeStore']
  const watch: typeof import('vue')['watch']
  const watchEffect: typeof import('vue')['watchEffect']
  const watchPostEffect: typeof import('vue')['watchPostEffect']
  const watchSyncEffect: typeof import('vue')['watchSyncEffect']
  const yesOrNoOptions: typeof import('../constants/common')['yesOrNoOptions']
  const yesOrNoRecord: typeof import('../constants/common')['yesOrNoRecord']
}
// for type re-export
declare global {
  // @ts-ignore
  export type { Component, Slot, Slots, ComponentPublicInstance, ComputedRef, DirectiveBinding, ExtractDefaultPropTypes, ExtractPropTypes, ExtractPublicPropTypes, InjectionKey, PropType, Ref, MaybeRef, MaybeRefOrGetter, VNode, WritableComputedRef } from 'vue'
  import('vue')
  // @ts-ignore
  export type { TreeOption, FormRules } from 'naive-ui'
  import('naive-ui')
  // @ts-ignore
  export type { FlatResponseData } from '~/packages/axios/src'
  import('~/packages/axios/src')
  // @ts-ignore
  export type { ECOption } from '../hooks/common/echarts'
  import('../hooks/common/echarts')
  // @ts-ignore
  export type { SetupStoreId, UploadStatus } from '../enum/index'
  import('../enum/index')
}
